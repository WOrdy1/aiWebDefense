// src/api/auth.ts
import { apiClient } from './client';
import type { LoginResponse, User } from './types';

// üîí –¢–∏–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–∞—Ä–æ–ª–µ–º (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ª–æ–∫–∞–ª—å–Ω–æ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏)
interface LoginUser extends User {
  password: string;
}

/**
 * üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * –ò—â–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ JSON-—Å–µ—Ä–≤–µ—Ä–µ –ø–æ email –∏ –ø–∞—Ä–æ–ª—é
 */
export async function login(username: string, password: string): Promise<LoginResponse> {
  try {
    // 1Ô∏è‚É£ –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ json-server
    const users = await apiClient.get<LoginUser[]>('/users');

    // 2Ô∏è‚É£ –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Å–æ–≤–ø–∞–¥–∞—é—â–∏–º–∏ email –∏ –ø–∞—Ä–æ–ª–µ–º
    const user = users.find(
      (u: LoginUser) =>
        u.email.toLowerCase() === username.toLowerCase() && String(u.password) === String(password),
    );

    // 3Ô∏è‚É£ –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî –æ—à–∏–±–∫–∞
    if (!user) {
      throw new Error('Invalid email or password');
    }

    // 4Ô∏è‚É£ –°–æ–∑–¥–∞—ë–º mock-—Ç–æ–∫–µ–Ω
    const token = `mock-token-${user.id}`;

    // 5Ô∏è‚É£ –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ä–µ–∫—Ç –æ—Ç–≤–µ—Ç–∞ (–±–µ–∑ –ø–∞—Ä–æ–ª—è)
    const { password: _, ...safeUser } = user;
    return { token, user: safeUser };
  } catch (error) {
    console.error('‚ùå Login failed:', error);
    throw error;
  }
}

/**
 * üë§ –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ mock-—Ç–æ–∫–µ–Ω–∞
 */
export async function getCurrentUser(token: string): Promise<User> {
  try {
    if (!token) throw new Error('No token provided');

    const id = token.split('-').pop();
    if (!id) throw new Error('Invalid token format');

    // ‚úÖ apiClient —É–∂–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —á–∏—Å—Ç—ã–π –æ–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await apiClient.get<User>(`/users/${id}`);
    return user;
  } catch (error) {
    console.error('‚ö†Ô∏è Failed to load current user:', error);
    throw error;
  }
}
